[user]
	name = SeungukLee
	email = seunguk@seunguk.dev
	signingkey = CDB070320580A52D
[alias]
	alias-basic = "!#----------------------------------------------------------;\n\
    git alias | head -4"
	s = status -s -uall
	cm = commit -m
	ca = commit --amend

	alias-log = "!#----------------------------------------------------------;\n\
    git alias | egrep 'log|commit-'"	
	commit-select = "!# Select a commit hash from log graph.;\n\
    git l \
    | fzf -m --ansi --layout=reverse --preview=\"echo {} | sed 's/^[*| ]*//g' | cut -d' ' -f1 | xargs git show --color=always \" \
    | sed 's/^[*| ]*//g' | cut -d' ' -f1"
	commit-copy = "!# Select & copy a commit hash from log graph.;\n\
    git commit-select | pbcopy && echo Copied : `pbpaste`;"
	lg = "!# Show log graph (all);\n\
		git log \
			--all \
			--color --graph \
			--abbrev-commit \
			--pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
	l = "!# Show log graph;\n\
		git log \
			--color --graph --decorate \
			--date=format:'%Y-%m-%d' \
			--abbrev-commit \
			--pretty=format:'%C(red)%h%C(auto)%d %s %C(green)(%cr)%C(bold blue) %an'"
	ranking = "!# List commit counts of contributors;\n\
    git shortlog -sn"

	alias-branch = "!#----------------------------------------------------------;\n\
    git alias | egrep '[bB]ranch'"
  bb = "!# Branch tools. Type 'git bb help'.;\n\
    f() { \n\
      if [ $# = 0 ]; then \
        git branch-select | xargs git checkout; \
      elif [ $1 = 'help' ]; then \
        echo 'git bb           : Select and checkout branch'; \
				echo 'git bb r, remote : Select and checkout remote branch'; \
        echo 'git bb c, clean  : Clean all merged branches'; \
        echo 'git bb d, D      : Delete seleted branches(D: force)'; \
        echo 'git bb l, list   : List branches excluding the current branch'; \
        echo 'git bb m, merged : List merged branches excluding the current and master branches'; \
			elif [ $1 = 'remote' -o $1 = 'r' ]; then \
        git checkout -t $(git branch-remote-select); \
      elif [ $1 = 'd' -o $1 = 'D' ]; then \
        git branch -$1 $(git bb list | fzf -m | awk '{print $2}'); \
      elif [ $1 = 'clean' -o $1 = 'c' ]; then \
        git branch-clean; \
      elif [ $1 = 'list' -o $1 = 'l' ]; then \
        git branch-list; \
      elif [ $1 = 'merged' -o $1 = 'm' ]; then \
        git branch-merged; \
      elif [ $1 = 'select' -o $1 = 's' ]; then \
        git branch-select; \
      else \
        git bb help; \
      fi; \
    }; f"
	branch-merged = "!# View a list of merged branches (excluding current/master branches).;\n\
		git branch --merged | grep -v '^\\*\\|\\<master$'"
	branch-clean = "!# Search and delete merged branches.;\n\
    curr_hash=`git show -s | head -1 | cut -d ' ' -f2`; \
    for branch in `find .git/refs -type f | fzf --ansi -m --preview=\"cat {} | xargs git l\"` ; do \
      hash=`cat $branch`; \
      if [ $hash = $curr_hash ]; then \
        continue; \
      fi; \
      git l | egrep $hash -C 1; \
      read -p \"Delete $branch? [y|n] \" -r; \
      REPLY=${REPLY:-"n"}; \
      if [ $REPLY = \"y\" ]; then \
        rm $branch; \
        echo \"\\033[32m$branch \\033[0mhas been\\033[31m deleted\\033[0m.\n\"; \
      fi; \
    done"
	b0 = "!# Print current branch.;\n\
    git branch | awk '/^\\*/{print $2}'"
	backup = "!# Backup current branch.;\n\
		git branch backup-`git b0`"
	branch-list = "!# List the branches.;\n\
    git for-each-ref --sort=-committerdate refs/heads --format='%(HEAD) %(refname:strip=2) | %(committerdate:relative) | %(authorname)' \
    | column -ts'|' \
    | sed 's/^ /./'"
	branch-list-all = "!# List all branches.;\n\
    for branch in `git branch -r --merged | grep -v HEAD`; do echo `git show --format=\"%ci ; %cr ; %an ;\" $branch | head -n 1` $branch; done | sort -r | column -ts';'"
  branch-select = "!# Select a branch with preview;\n\
    f() { \
      _height=$(stty size | awk '{print $1}');\
      git branch-list | fzf --preview \"git l {2} | head -n $_height\" | awk '{print $2}'; \
    }; f"
	branch-remote-select = "!# Select remote branch with preview; \n\
    f() { \
      _height=$(stty size | awk '{print $1}');\
      git branch -r | egrep -v '^\\*' | fzf --preview \"git l {1} | head -n $_height\"; \
    }; f"
	ch = "!# Branch tools. Same with bb.;\n\
		git bb $1"
	sync = "!# Sync with a branch with the same name in the remote repo.;\n\
    remote=$( \
      { \
        git remote -v | egrep '^(origin|upstream)\\s'; \
        git remote -v | egrep -v '^(origin|upstream)\\s' | sort; \
      } \
      | awk '{print $1, $2}' | uniq \
      | column -t \
      | fzf | awk '{print $1}' \
    ); \
    curr_b=$(git branch | awk '/^\\*/{print $2}'); \
    if ! [ -z $remote ]; then \
      git fetch $remote && git reset --hard $remote/`git b0`; \
		fi"
  update = "!# Synchronize the contents of local files with the repository;\n\
    remote=$( \
      { \
        git remote -v | egrep '^(origin|upstream)\\s'; \
        git remote -v | egrep -v '^(origin|upstream)\\s' | sort; \
      } \
      | awk '{print $1, $2}' | uniq \
      | column -t \
      | fzf | awk '{print $1}' \
    ); \
    git stash; git pull --rebase $remote `git b0`; git stash pop;"

  alias-stage = "!#----------------------------------------------------------;\n\
    git alias | egrep '(add|diff|stage)' -i"
  a = "!# Select files and Add them.;\n\
		git diff-select | xargs git add"
	ac = "!# Add, Commit.;\n\
    git a; git commit"
	aa = "add *"
  ap = "add -p"
  diff-select = "!# Select changed files to add them.;\n\
    f() { \
      git diff-info \
        | egrep -v '[^?] *STAGED ' \
        | fzf -m --header \"$(git diff --shortstat)\" --preview \
          \"if [[ {1} == '??' ]]; then bat --style=numbers --color=always {3}; else git diff {3} | bat --style=numbers --color=always; fi\" \
        | awk '{print $3}'; \
    }; f"
	diff-info = "! # get diff info;\n\
    fileA=/tmp/git-s-$(uuidgen); \
    fileB=/tmp/git-diff-$(uuidgen); \
    git s | awk '{print $2,$1}' > $fileA; \
    git diff --numstat | awk '{print $3,$1,$2}' > $fileB; \
    join -t' ' -a 1 $fileA $fileB | awk '{print $2, \"(+\"$3 \",-\"$4\")\", $1}' | sed 's/(+,-)/./' | column -t -s' ' ; \
    rm -f $fileA $fileB; \
	"
	diff-unselect = "!# Select staged files to unstage them.;\n\
    f() { \
      git diff-info \
      	| egrep '[^?] *STAGED ' \
        | fzf -m --header \"$(git diff --shortstat)\" --preview \
          \"if [[ {1} == '??' ]]; then bat --style=numbers --color=always {3}; else git diff {3} | bat --style=numbers --color=always; fi\" \
        | awk '{print $3}'; \
    }; f"
	unstage = "!# Select staged files and Unstage them.;\n\
    git diff-unselect | xargs git reset HEAD"

	alias-stash = "!#----------------------------------------------------------;\n\
    git alias | grep stash"
	stash-apply = "!# Select a stash item and Apply it.;\n\
    git stash-op apply"
	stash-drop = "!# Select the stash items and Drop them.;\n\
    for sid in $(git stash-select -m) ; do \
      git stash drop $sid; \
    done;"
	stash-pop= "!# Select a stash item and Pop it (Pop is apply + drop).;\n\
    git stash-op pop"
	stash-list = "!# List stash items.;\n\
    git stash list --pretty=format:\"%C(red)%gd%C(reset) %C(green)(%cr) %C(reset)%s\""
	stash-select = "!# Select stash item(s).;\n\
    f() { \
      git stash-list \
        | fzf --ansi $1 --preview \"git stash show -p {1} --color=always\" \
        | cut -d' ' -f1; \
    }; f"
	stash-op = "!#A private stash tool.;\nf() { git stash-select | xargs git stash $1; }; f"

	alias-alias = "!#----------------------------------------------------------;\n\
    git alias | grep alias"
	alias = "!# Prints all aliases.;\n\
    git config --list \
    | egrep '^alias.+' \
    | sed -e 's/^alias\\.//' \
    | sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/' \
    | column -t -s'=' \
    | sed 's/!#* *//; s/;$//' \
    | cut -c1-85"
	alias-doctor = "!# Check the dependency tools.;\n\
    f() { \
      if [ $(which fzf | wc -l) -lt 1 ]; then \
        echo 'Not found : fzf'; \
        echo '    see          : https://github.com/junegunn/fzf#installation'; \
        echo '';\
      fi; \
    }; f"

[core]
  excludesfile = /Users/SeungUk/dotfiles/.gitignore_global
  precomposeunicode = true
  quotepath = false
[commit]
  gpgsign = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[init]
  defaultBranch = main
[pull]
	rebase = true
[rebase]
	autoStash = true